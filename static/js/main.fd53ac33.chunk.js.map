{"version":3,"sources":["Components/BubbleSort.js","Components/QuickSort.js","Components/MergeSort.js","Components/Sorting.jsx","App.js","serviceWorker.js","index.js"],"names":["animations","swap","arr","current","next","push","curVal","getAnimations","quickSortAnims","doQuickSort","array","QuickSort","start","end","partitionIndex","pivot","i","partition","length","doMergeSort","mergeSort","middleIndex","Math","floor","leftArr","slice","rightArr","output","leftIndex","rightIndex","leftEl","rightEl","console","log","merge","mergeSortAnimations","SortingVisualizer","props","state","arraySize","barHeight","quickSortSpeed","bubbleSortSpeed","this","resetArray","randomIntFromIntervals","setState","anims","sortedArray","newArray","endIndex","swaps","currentIndex","doBubbleSort","bars","firstBar","secondBar","document","getElementsByClassName","setTimeout","firstIdx","secondIdx","j","style","height","backgroundColor","temp","className","map","value","idx","key","onClick","bubbleSort","quicksort","React","Component","min","max","r","random","indexOf","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fd53ac33.chunk.js","sourcesContent":["const animations = [];\r\n\r\nexport const swap = (arr, current, next) => {\r\n    animations.push(arr[current]);\r\n    animations.push(arr[next]);\r\n\r\n\r\n    let curVal = arr[current];\r\n    arr[current] = arr[next];\r\n    arr[next] = curVal;\r\n\r\n    \r\n    \r\n    \r\n    getAnimations(animations);\r\n}\r\n\r\nexport const getAnimations = (animations) => {\r\n    const newAnims = animations; \r\n    \r\n    return newAnims; \r\n}\r\n\r\n\r\nexport const doBubbleSort = (array) => {\r\n         //start the endIndex at the last index of the arrayay\r\n         let newArray = array; \r\n        \r\n         let endIndex = newArray.length - 1;\r\n         //run the loop until the endIndex(sorted portion) is the 0 (the full newArrayay)\r\n         while(endIndex > 0){\r\n             // count the number of swaps to short circuit the loop if it is already sorted\r\n             let swaps = 0;\r\n             //reset the currentIndex to the beginning of the newArrayay each time a new element is sorted\r\n             let currentIndex = 0;\r\n             // loop over the newArrayay, comparing each pair of elements until the comparison element reaches the sorted portion of the newArrayay\r\n             while(currentIndex < endIndex){\r\n                 // uncomment this line to see the comparison in action\r\n                //console.log(newArray[currentIndex], newArray[currentIndex + 1])\r\n                 // if the current element is greater than the element in front of it\r\n                 if(newArray[currentIndex] > newArray[currentIndex + 1]){\r\n                     //swap the 2 elements using our helper function\r\n                     swap(newArray, currentIndex, currentIndex + 1);\r\n                     // add 1 to the swaps counter\r\n                     swaps++;\r\n                 }\r\n             //increase the currentIndex to continue iterating through the newArrayay\r\n             currentIndex++;\r\n             }\r\n             //stop the loop if there were no swaps because the newArrayay must be already sorted \r\n             if(swaps === 0)break;\r\n             // subtract the endIndex number to account for the new element added to the newArrayay\r\n             endIndex--;\r\n         }\r\n\r\n         return newArray;\r\n}\r\n\r\nexport default animations; ","const quickSortAnims = [];\r\n\r\n\r\nexport const swap = (arr, current, next) =>{\r\n\r\n    var curVal = arr[current];\r\n\r\n    arr[current] = arr[next];\r\n    arr[next] = curVal;\r\n\r\n    if(arr[current] !== arr[next]){\r\n        quickSortAnims.push(arr[current]);\r\n        quickSortAnims.push(arr[next]);\r\n    }\r\n}\r\n\r\nexport const doQuickSort = (array) => {\r\n    \r\n    \r\n    QuickSort(array, 0, array.length-1); //inital call to quicksort the array \r\n        \r\n    \r\n    //function that partitions the array and sorts the partition\r\n    function partition(array, start, end){\r\n        let pivot = array[end]; //pivot index to start at the end of the arr\r\n        let partitionIndex = start; //partition index to start at the front of the array \r\n        \r\n        for(let i = start; i < end; i++){ //going from front to end in the array \r\n            if(array[i] <= pivot){ //if array index is less than pivot\r\n                swap(array, i, partitionIndex);\r\n                partitionIndex++; //increment parition index \r\n            }\r\n        }\r\n       \r\n        swap(array, partitionIndex, end);\r\n        \r\n        return partitionIndex;\r\n    }\r\n    \r\n    function QuickSort(array, start, end){\r\n        if(start < end){\r\n            let partitionIndex = partition(array, start, end);\r\n            QuickSort(array, start, partitionIndex-1);\r\n            QuickSort(array, partitionIndex+1, end);\r\n        }\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nexport default quickSortAnims;","let mergeSortAnimations = []; \r\n\r\nexport const swap = (originalArr, leftArr, rightArr) => {\r\n  \r\n  let copyLeft = leftArr;\r\n  let copyRight = rightArr;\r\n\r\n}\r\n\r\nexport const doMergeSort = (array) => {\r\n\r\n  function merge(leftArr, rightArr){\r\n    const output = [];\r\n    let leftIndex = 0; \r\n    let rightIndex = 0; \r\n\r\n    while(leftIndex < leftArr.length && rightIndex < rightArr.length){\r\n       \r\n      const leftEl = leftArr[leftIndex];\r\n      const rightEl = rightArr[rightIndex];\r\n\r\n      if(leftEl < rightEl){\r\n        output.push(leftEl);\r\n        //mergeSortAnimations.push(leftEl);\r\n        //console.log(\"left: \" + leftEl);\r\n        leftIndex++;\r\n      }\r\n      else{\r\n        output.push(rightEl);\r\n        //console.log(\"right: \" + rightEl);\r\n        //mergeSortAnimations.push(rightEl);\r\n        rightIndex++;\r\n      }\r\n    }\r\n    //console.log(\"output: \" + [...output])\r\n    \r\n    console.log([...output, ...leftArr.slice(leftIndex), ...rightArr.slice(rightIndex)])\r\n    return ( [...output, ...leftArr.slice(leftIndex), ...rightArr.slice(rightIndex)]); \r\n  };\r\n  \r\n  function mergeSort(array) {\r\n\r\n    \r\n    if(array.length <= 1){\r\n      \r\n      return array;\r\n    }\r\n    \r\n    const middleIndex = Math.floor(array.length / 2);\r\n    const leftArr = array.slice(0, middleIndex);\r\n    const rightArr = array.slice(middleIndex, array.length);\r\n    \r\n    swap(array, leftArr, rightArr);\r\n    \r\n    \r\n    //console.log(leftArr);\r\n    //console.log(rightArr);\r\n    //console.log(rightArr)\r\n    \r\n    \r\n    return merge(\r\n      mergeSort(leftArr),\r\n      mergeSort(rightArr),\r\n    ); \r\n\r\n  }\r\n\r\n  return mergeSort(array);\r\n}\r\n\r\nexport default mergeSortAnimations; \r\n","import React from 'react'\r\nimport '../Components/Sorting.css'\r\nimport  '../Components/BubbleSort.js';\r\nimport animations, { doBubbleSort } from '../Components/BubbleSort.js';\r\nimport quickSortAnims, { doQuickSort } from '../Components/QuickSort.js';\r\nimport mergeSortAnimations, { doMergeSort } from './MergeSort';\r\n\r\n\r\nexport class SortingVisualizer extends React.Component{\r\n    \r\n\r\n    //Creates a random array for sorting purpose\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            array:[],\r\n            arraySize: 7, \r\n            barHeight: 750,\r\n            quickSortSpeed: 1,\r\n            bubbleSortSpeed: 1,  \r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();   \r\n    }\r\n\r\n    \r\n    \r\n    resetArray(){\r\n        let array = [];\r\n        \r\n        for(let i = 0; i < this.state.arraySize; i++){\r\n            array.push(randomIntFromIntervals(5,this.state.barHeight, array));\r\n\r\n            \r\n        }\r\n        this.setState({array});\r\n        console.log(array);\r\n    }\r\n\r\n    \r\n    \r\n    bubbleSort(){\r\n        let anims = [];\r\n        const sortedArray = doBubbleSort(this.state.array);\r\n        console.log(sortedArray);\r\n        let bars = [];\r\n        \r\n        //Only initial positions\r\n        //console.log(arrayBars); //inital log\r\n        anims = animations;\r\n        //console.log(anims);\r\n        \r\n        for(let i = 0; i < anims.length; i+=2){\r\n            \r\n            let swap = 0;\r\n            let firstBar = anims[i] + 'px';\r\n            let secondBar = anims[i+1] + 'px';\r\n            bars = document.getElementsByClassName('array-bar');\r\n            \r\n            console.log('anim: ' + firstBar + ' ' + secondBar);\r\n            \r\n            //console.log(currentArrayBars);\r\n           \r\n            setTimeout(() => {\r\n                let firstIdx = 0; \r\n                let secondIdx = 0; \r\n\r\n               while(swap === 0)\r\n               {\r\n                   for(let j = 0; j < bars.length; j++){\r\n                       if(bars[j].style.height === firstBar){\r\n                           firstIdx = j; \r\n                           bars[j].style.backgroundColor = 'red';\r\n                       }\r\n                       else if(bars[j].style.height === secondBar){\r\n                            secondIdx = j; \r\n                            bars[j].style.backgroundColor = \"red\";\r\n                       }\r\n                       else{\r\n                        bars[j].style.backgroundColor = \"blue\";\r\n                       }\r\n                   }\r\n\r\n                   let temp = bars[firstIdx].style.height;\r\n                   \r\n                   bars[firstIdx].style.backgroundColor = \"red\";\r\n                   bars[secondIdx].style.backgroundColor = \"red\";\r\n\r\n                   bars[firstIdx].style.height = bars[secondIdx].style.height;\r\n                   bars[secondIdx].style.height = temp;\r\n\r\n                   swap++;\r\n               }\r\n\r\n            }, i * this.state.bubbleSortSpeed)\r\n            \r\n            \r\n            \r\n            \r\n        }\r\n\r\n        anims.length = 0;\r\n        \r\n        \r\n    \r\n    }; \r\n\r\n    quicksort(){\r\n        let anims = [];\r\n        const sortedArray = doQuickSort(this.state.array);\r\n        anims = quickSortAnims;\r\n        let bars = [];\r\n        \r\n        //console.log(sortedArray);\r\n\r\n        for(let i = 0; i < anims.length; i+=2){\r\n            \r\n            let swap = 0;\r\n            let firstBar = anims[i] + 'px';\r\n            let secondBar = anims[i+1] + 'px';\r\n            bars = document.getElementsByClassName('array-bar');\r\n            \r\n            //console.log('anim: ' + firstBar + ' ' + secondBar);\r\n            \r\n            //console.log(currentArrayBars);\r\n           \r\n            setTimeout(() => {\r\n                let firstIdx = 0; \r\n                let secondIdx = 0; \r\n\r\n               while(swap === 0)\r\n               {\r\n                   for(let j = 0; j < bars.length; j++){\r\n                       if(bars[j].style.height === firstBar){\r\n                           firstIdx = j; \r\n                           bars[j].style.backgroundColor = 'red';\r\n                       }\r\n                       else if(bars[j].style.height === secondBar){\r\n                            secondIdx = j; \r\n                            bars[j].style.backgroundColor = \"red\";\r\n                       }\r\n                       else{\r\n                        bars[j].style.backgroundColor = \"blue\";\r\n                       }\r\n                   }\r\n                   if(firstIdx === secondIdx){\r\n                    bars[firstIdx].style.backgroundColor = \"red\";\r\n                   }\r\n                   else{\r\n                    let temp = bars[firstIdx].style.height;\r\n                   \r\n                    bars[firstIdx].style.backgroundColor = \"red\";\r\n                    bars[secondIdx].style.backgroundColor = \"red\";\r\n \r\n                    bars[firstIdx].style.height = bars[secondIdx].style.height;\r\n                    bars[secondIdx].style.height = temp;\r\n\r\n                   }\r\n\r\n                   \r\n\r\n                   swap++;\r\n               }\r\n            }, i * this.state.quickSortSpeed)\r\n        }\r\n\r\n        anims.length = 0;  \r\n    }\r\n\r\n    mergeSort(){\r\n        let anims = [];\r\n        const sortedArray = doMergeSort(this.state.array);\r\n        anims = mergeSortAnimations;\r\n        let bars = [];\r\n        \r\n        console.log(sortedArray);\r\n\r\n        for(let i = 0; i < anims.length; i+=2){\r\n            \r\n            let swap = 0;\r\n            let firstBar = anims[i] + 'px';\r\n            let secondBar = anims[i+1] + 'px';\r\n            bars = document.getElementsByClassName('array-bar');\r\n            \r\n            //console.log('anim: ' + firstBar + ' ' + secondBar);\r\n            \r\n            //console.log(currentArrayBars);\r\n           \r\n            setTimeout(() => {\r\n                let firstIdx = 0; \r\n                let secondIdx = 0; \r\n\r\n               while(swap === 0)\r\n               {\r\n                   for(let j = 0; j < bars.length; j++){\r\n                       if(bars[j].style.height === firstBar){\r\n                           firstIdx = j; \r\n                           bars[j].style.backgroundColor = 'red';\r\n                       }\r\n                       else if(bars[j].style.height === secondBar){\r\n                            secondIdx = j; \r\n                            bars[j].style.backgroundColor = \"red\";\r\n                       }\r\n                       else{\r\n                        bars[j].style.backgroundColor = \"blue\";\r\n                       }\r\n                   }\r\n                   if(firstIdx === secondIdx){\r\n                    bars[firstIdx].style.backgroundColor = \"red\";\r\n                   }\r\n                   else{\r\n                    let temp = bars[firstIdx].style.height;\r\n                   \r\n                    bars[firstIdx].style.backgroundColor = \"red\";\r\n                    bars[secondIdx].style.backgroundColor = \"red\";\r\n \r\n                    bars[firstIdx].style.height = bars[secondIdx].style.height;\r\n                    bars[secondIdx].style.height = temp;\r\n\r\n                   }\r\n\r\n                   \r\n\r\n                   swap++;\r\n               }\r\n            }, i * this.state.quickSortSpeed)\r\n        }\r\n\r\n        anims.length = 0;  \r\n\r\n    }\r\n     \r\nrender(){\r\n    const {array} = this.state; \r\n    \r\n    return (\r\n\r\n       <div className = \"array-container\">\r\n\r\n        {array.map((value, idx) => (\r\n                <div className = \"array-bar\"   key = {idx}\r\n                  style = {{height: `${value}px`}}>\r\n                </div>\r\n        ))}\r\n\r\n        <div >\r\n            <button onClick ={() => this.resetArray()}> Generate New Array </button>\r\n            <button onClick ={() => this.bubbleSort()}> Bubble Sort</button>\r\n            <button onClick ={() => this.quicksort()}>  Quick Sort</button>\r\n            \r\n        </div>\r\n    \r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n}\r\nexport default SortingVisualizer\r\n\r\nfunction randomIntFromIntervals(min, max, arr){\r\n    while(arr.length < max){\r\n        var r = Math.floor(Math.random() * max) + 1;\r\n        if(arr.indexOf(r) === -1) \r\n        return r; \r\n    }\r\n}","import './App.css';\nimport './Components/Sorting.jsx'\nimport SortingVisualizer from './Components/Sorting.jsx';\nimport React from 'react'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}